<?xml version="1.0" encoding="UTF-8"?>
<Template ads="nEBb4EhA2r2RfQR7XSlSug" name="design.persistence.xmlobject" is_valid="Y" note="M#">
  <Define ads="]E[MIOeUo79dXfu13d2wsA" name="package" is_valid="Y" note="M#" value="org.mobj.mylife.data.base" />
  <Source ads="WkcEiMRQuJETYp5z2XC0pg" is_valid="Y" note="M#"><![CDATA[//============================================================
// <T><jt:item source='$group.label'/>实体定义。</T>
//
// @version 1.0.1
// @auto 代码器管理的代码，如需修改请在手动修改标出的地方修改。
//============================================================
#include "<jt:item source='$group.source_name'/>.h"

MO_NAMESPACE_BEGIN
<jt:loop source='$group' alias='entity'>
<jt:equals source='$entity:name' value='Struct|Entity'>

//============================================================
<jt:loop source='$entity' alias='field'>
// @property <jt:item source='$field.label'/>定义
SPropertyInfo K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property = SPropertyInfo(<jt:true source='$field.is_property'><jt:item source='$field.property_full'/></jt:true><jt:false source='$field.is_property'><jt:item source='$field.property_id'/></jt:false>, TC("<jt:item source='$field.name' format='db.func.lower'/>"), EType_<jt:item source='$field.type'/>);
</jt:loop>

//============================================================
// <T>重置内部消息。</T>
//============================================================
void S<jt:item source='$entity.name'/>::InnerReset(){
<jt:loop source='$entity' alias='field'>
<jt:false source='$field.is_persistence'>
<jt:true source='$field.is_collection'>
   <jt:item source='$field.name'/>.Reset();
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool'>
   <jt:item source='$field.name'/> = EFalse;
</jt:equals>
<jt:equals source='$field.type' value='Type'>
<jt:equals source='$field.type_name' value='TTemplateId|TRecordId|TObjectId|TLinkId'>
   <jt:item source='$field.name'/> = 0;
</jt:equals>
</jt:equals>
<jt:equals source='$field.type' value='Enum'>
   <jt:item source='$field.name'/> = (<jt:item source='$field.type_name'/>)0;
</jt:equals>
<jt:equals source='$field.type' value='Set'>
   <jt:item source='$field.name'/>.Clear();
</jt:equals>
<jt:equals source='$field.type' value='Byte|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Date|Tick|Span|DateTime|TimeSpan|TimeTick'>
   <jt:item source='$field.name'/> = 0;
</jt:equals>
<jt:equals source='$field.type' value='Float|Double'>
   <jt:item source='$field.name'/> = 0.0f;
</jt:equals>
<jt:equals source='$field.type' value='Bytes|String'>
   <jt:item source='$field.name'/>.Reset();
</jt:equals>
<jt:equals source='$field.type' value='Object'>
   <jt:item source='$field.name'/>.Reset();
</jt:equals>
</jt:false>
</jt:false>
</jt:loop>
}

//============================================================
// <T>获得当前结构体的大小。</T>
//
// @return 消息大小
//============================================================
TSize S<jt:item source='$entity.name'/>::Capacity(){
   // 序列化消息
<jt:empty source='$entity.parent_name'>
   TSize capacity = 0;
</jt:empty>
<jt:notEmpty source='$entity.parent_name'>
   TSize capacity = S<jt:item source='$entity.parent_name'/>::Capacity();
</jt:notEmpty>
<jt:loop source='$entity' alias='field'>
<jt:true source='$field.is_collection'>
   capacity += <jt:item source='$field.name'/>.Capacity();
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Type|Enum|Struct'>
   capacity += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Bool|Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   capacity += sizeof(T<jt:item source='$field.type'/>);
</jt:equals>
<jt:equals source='$field.type' value='Set|Bytes|String|Object|Types'>
   capacity += <jt:item source='$field.name'/>.Capacity();
</jt:equals>
</jt:false>
</jt:loop>
   return capacity;
}

//============================================================
// <T>判断自己和指定对象将是否相等。</T>
//
// @param value 指定对象
// @return 是否相等
//============================================================
TBool S<jt:item source='$entity.name'/>::Equals(S<jt:item source='$entity.name'/>& value){
<jt:empty source='$entity.parent_name'>
   TBool result = ETrue;
</jt:empty>
<jt:notEmpty source='$entity.parent_name'>
   TBool result = S<jt:item source='$entity.parent_name'/>::Equals(value);
   if(!result){
      return EFalse;
   }
</jt:notEmpty>
<jt:loop source='$entity' alias='field'>
<jt:false source='$field.is_collection'>
<jt:false source='$field.is_system'>
<jt:equals source='$field.type' value='Type|Enum|Set|Bool|Char|Byte|Int16|Int32|Int64|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime|Struct'>
   if(this-><jt:item source='$field.name'/> != value.<jt:item source='$field.name'/>){
      return EFalse;
   }
</jt:equals>
</jt:false>
</jt:false>
</jt:loop>
   return result;
}

//============================================================
// <T>复制指定对象信息到自己内部。</T>
//
// @param value 指定对象
//============================================================
void S<jt:item source='$entity.name'/>::Assign(S<jt:item source='$entity.name'/>& value){
   MO_LIB_MEMORY_COPY(this, sizeof(S<jt:item source='$entity.name'/>), &value, sizeof(S<jt:item source='$entity.name'/>));
}

//============================================================
// <T>获得一个指定的属性对象。</T>
//
// @param property 属性对象
// @return 是否成功
//============================================================
TBool S<jt:item source='$entity.name'/>::PropertyMod(TProperty& property){
   // 判断有效性
   if(!property.IsValid()){
      return EFalse;
   }
<jt:notEmpty source='$entity.parent_name'>
   if(S<jt:item source='$entity.parent_name'/>::PropertyMod(property)){
      return ETrue;
   }
</jt:notEmpty>
<jt:true source='$entity.has_property'>
   // 获得属性
   TUint16 propertyId = property.Info()->Id();
   EModify modifyCd = property.ModifyCd();
   switch(propertyId){
<jt:loop source='$entity' alias='field' filter='$field.is_property=Y'>
      //............................................................
      // 修改属性<jt:item source='$field.label'/>。
      case <jt:item source='$field.property_full'/>:{
         if(EModify_Get == modifyCd){
<jt:equals source='$field.type' value='Type|Bool|Enum|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|Struct|Object'>
            property.Set(&<jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Set'>
            property.Set(<jt:item source='$field.name'/>.Refer());
</jt:equals>
<jt:equals source='$field.type' value='String'>
            property.Set(<jt:item source='$field.name'/>.Memory());
</jt:equals>
         }else if(EModify_Set == modifyCd){
<jt:equals source='$field.type' value='Type|Struct'>
            <jt:item source='$field.name'/> = *(<jt:item source='$field.type_name'/>*)property.Get();
</jt:equals>
<jt:equals source='$field.type' value='Float|Double'>
            <jt:item source='$field.name'/> = *(T<jt:item source='$field.type'/>*)property.Get();
</jt:equals>
<jt:equals source='$field.type' value='Enum'>
            <jt:item source='$field.name'/> = *(<jt:item source='$field.type_name'/>*)property.Get();
</jt:equals>
<jt:equals source='$field.type' value='Set'>
            <jt:item source='$field.name'/>.Modify(*(T<jt:item source='$field.data_type_cd'/>*)property.Get());
</jt:equals>
<jt:equals source='$field.type' value='Bool|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64'>
            <jt:item source='$field.name'/> = *(T<jt:item source='$field.type'/>*)property.Get();
</jt:equals>
<jt:equals source='$field.type' value='String'>
            <jt:item source='$field.name'/> = (TCharC*)property.Get();
</jt:equals>
<jt:equals source='$field.type' value='Object'>
            <jt:item source='$field.name'/>.Assign(property.AsObject<<jt:item source='$field.type_name'/>*>());
</jt:equals>
         }else{
            MO_FATAL("Unknown property modify mode. (group=<jt:item source='$entity.name'/>, field=<jt:item source='$field.name'/>, modify_cd=%d)", modifyCd);
         }
         return ETrue;
      }
</jt:loop>
   }
 </jt:true>
  return EFalse;
}

//============================================================
// <T>获得一个指定的属性对象。</T>
//
// @param property 属性对象
// @return 是否成功
//============================================================
TProperty S<jt:item source='$entity.name'/>::PropertyGet(TPropertyId propertyId){
   TProperty property;
<jt:true source='$entity.has_property'>
   switch(propertyId){
<jt:loop source='$entity' alias='field' filter='$field.is_property=Y'>
      // 获得属性<jt:item source='$field.label'/>。
      case <jt:item source='$field.property_full'/>:{
<jt:equals source='$field.type' value='Type|Bool|Enum|Set|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|Struct|Object'>
         property.Set(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property, &<jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='String'>
         property.Set(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property, <jt:item source='$field.name'/>.Memory());
</jt:equals>
         break;
      }
</jt:loop>
   }
</jt:true>
   return property;
}

//============================================================
// <T>设置一个指定的属性对象。</T>
//
// @param property 属性对象
// @return 是否成功
//============================================================
TBool S<jt:item source='$entity.name'/>::PropertySet(TPropertyId propertyId, TAnyC* pMemory, TSize capacity){
   MO_FATAL_UNSUPPORT();
   return EFalse;
}

//============================================================
// <T>获得所有属性的集合。</T>
//
// @param properties 属性集合
// @return 是否成功
//============================================================
TBool S<jt:item source='$entity.name'/>::PropertyGetAll(TFsProperties& properties){
<jt:notEmpty source='$entity.parent_name'>
   S<jt:item source='$entity.parent_name'/>::PropertyGetAll(properties);
</jt:notEmpty>
<jt:loop source='$entity' alias='field' filter='$field.is_property=Y'>
   // 获得属性<jt:item source='$field.label'/>。
<jt:equals source='$field.type' value='Type|Bool|Enum|Set|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|Struct|Object'>
   properties.Push(TProperty(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property, EModify_Get, &<jt:item source='$field.name'/>));
</jt:equals>
<jt:equals source='$field.type' value='String'>
   properties.Push(TProperty(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property, EModify_Get, <jt:item source='$field.name'/>.Memory()));
</jt:equals>
</jt:loop>
   return ETrue;
}

//============================================================
// <T>设置所有属性的集合。</T>
//
// @param properties 属性集合
// @return 是否成功
//============================================================
TBool S<jt:item source='$entity.name'/>::PropertySetAll(TFsProperties& properties){
   TInt count = properties.Count();
   for(TInt n = 0; n < count; n++){
      TProperty& property = properties[n];
      property.SetModifyCd(EModify_Set);
      PropertyMod(property);
   }
   return ETrue;
}

//============================================================
// <T>序列化信息到结构体。</T>
//
// @param pMemory 内存指针
// @param size 内存大小
// @return 序列化后大小
//============================================================
TInt S<jt:item source='$entity.name'/>::Serialize(TAny* pMemory){
   // 序列化消息
<jt:empty source='$entity.parent_name'>
   TSize offset = 0;
</jt:empty>
<jt:notEmpty source='$entity.parent_name'>
   TSize offset = S<jt:item source='$entity.parent_name'/>::Serialize(pMemory);
</jt:notEmpty>
   TByte* pPtr = (TByte*)pMemory;
   MO_ASSERT(pPtr);
<jt:loop source='$entity' alias='field'>
   // 序列化<jt:item source='$field.label'/>
<jt:true source='$field.is_collection'>
   offset += <jt:item source='$field.name'/>.Serialize(pPtr + offset);
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool'>
   *(TByte*)(pPtr + offset) = <jt:item source='$field.name'/> ? 1 : 0;
   offset += sizeof(TByte);
</jt:equals>
<jt:equals source='$field.type' value='Type'>
   *(<jt:item source='$field.type_name'/>*)(pPtr + offset) = <jt:item source='$field.name'/>;
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Enum'>
   *(T<jt:item source='$field.data_type_cd'/>*)(pPtr + offset) = (T<jt:item source='$field.data_type_cd'/>)<jt:item source='$field.name'/>;
   offset += sizeof(T<jt:item source='$field.data_type_cd'/>);
</jt:equals>
<jt:equals source='$field.type' value='Set'>
   *(T<jt:item source='$field.data_type_cd'/>*)(pPtr + offset) = <jt:item source='$field.name'/>.Get();
   offset += sizeof(T<jt:item source='$field.data_type_cd'/>);
</jt:equals>
<jt:equals source='$field.type' value='Char|Byte|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   *(T<jt:item source='$field.type'/>*)(pPtr + offset) = <jt:item source='$field.name'/>;
   offset += sizeof(T<jt:item source='$field.type'/>);
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
   *(<jt:item source='$field.type_name'/>*)(pPtr + offset) = <jt:item source='$field.name'/>;
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Bytes|String|Object|Types'>
   offset += <jt:item source='$field.name'/>.Serialize(pPtr + offset);
</jt:equals>
</jt:false>
</jt:loop>
   return offset;
}

//============================================================
// <T>序列化信息到内存指针。</T>
//
// @param ptr 指针对象
// @return 处理结果
//============================================================
TBool S<jt:item source='$entity.name'/>::SerializePtr(TBytePtr ptr){
   TInt length = Serialize(ptr.Memory());
   ptr.SetLength(length);
   return ETrue;
}

//============================================================
// <T>反序列化数据流到结构体。</T>
//
// @param pMemory 内存指针
// @param size 内存大小
// @return 序列化后大小
//============================================================
TInt S<jt:item source='$entity.name'/>::Unserialize(TAnyC* pMemory){
   // 反序列化消息
<jt:empty source='$entity.parent_name'>
   TInt offset = 0;
</jt:empty>
<jt:notEmpty source='$entity.parent_name'>
   TInt offset = S<jt:item source='$entity.parent_name'/>::Unserialize(pMemory);
   if(offset < 0){
      return offset;
   }
</jt:notEmpty>
   TByteC* pPtr = (TByteC*)pMemory;
   MO_ASSERT(pPtr);
<jt:loop source='$entity' alias='field'>
   // 反序列化<jt:item source='$field.label'/>
<jt:true source='$field.is_collection'>
   {
      TInt length = <jt:item source='$field.name'/>.Unserialize(pPtr + offset);
      if(length < 0){
         return length;
      }
      offset += length;
   }
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool'>
   <jt:item source='$field.name'/> = *(TByte*)(pPtr + offset);
   offset += sizeof(TByte);
</jt:equals>
<jt:equals source='$field.type' value='Type'>
   <jt:item source='$field.name'/> = *(<jt:item source='$field.type_name'/>*)(pPtr + offset);
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Enum'>
   <jt:item source='$field.name'/> = (<jt:item source='$field.type_name'/>)*(T<jt:item source='$field.data_type_cd'/>*)(pPtr + offset);
   offset += sizeof(T<jt:item source='$field.data_type_cd'/>);
</jt:equals>
<jt:equals source='$field.type' value='Set'>
   <jt:item source='$field.name'/>.Modify(*(T<jt:item source='$field.data_type_cd'/>*)(pPtr + offset));
   offset += sizeof(T<jt:item source='$field.data_type_cd'/>);
</jt:equals>
<jt:equals source='$field.type' value='Char|Byte|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
   <jt:item source='$field.name'/> = *(T<jt:item source='$field.type'/>*)(pPtr + offset);
   offset += sizeof(T<jt:item source='$field.type'/>);
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
   <jt:item source='$field.name'/> = *(<jt:item source='$field.type_name'/>*)(pPtr + offset);
   offset += sizeof(<jt:item source='$field.type_name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Bytes|String|Object|Types'>
   offset += <jt:item source='$field.name'/>.Unserialize(pPtr + offset);
</jt:equals>
</jt:false>
</jt:loop>
   return offset;
}

//============================================================
// <T>序列化信息到内存指针。</T>
//
// @param ptr 指针对象
// @return 处理结果
//============================================================
TBool S<jt:item source='$entity.name'/>::UnserializePtr(TBytePtr ptr){
   TInt length = Unserialize(ptr.Memory());
   if(length < 0){
      return EFalse;
   }
   ptr.SetLength(length);
   return ETrue;
}

//============================================================
// <T>将内容打包成为一个属性字符串。</T>
//
// @param pPack 打包字符串
// @return 处理结果
//============================================================
TBool S<jt:item source='$entity.name'/>::PackData(MPack* pPack){
<jt:empty source='$entity.parent_name'>
   TBool result = ETrue;
</jt:empty>
<jt:notEmpty source='$entity.parent_name'>
   // 父类处理
   TBool result = S<jt:item source='$entity.parent_name'/>::PackData(pPack);
   if(!result){
      return EFalse;
   }
</jt:notEmpty>
<jt:loop source='$entity' alias='field'>
   // 打包<jt:item source='$field.label'/>数据
<jt:true source='$field.is_collection'>
   if(pPack->WriteNodeBegin(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property, <jt:item source='$field.name'/>.Count())){
      if(!<jt:item source='$field.name'/>.Pack(pPack)){
         return EFalse;
      }
      pPack->WriteNodeEnd();
   }
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool|Byte|Char|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime|String|Enum'>
   pPack->WriteProperty<jt:item source='$field.type'/>(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property, <jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Type'>
   pPack->WriteProperty<jt:item source='$field.type'/>(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property, TFs<jt:item source='$field.type_name' removeFirst='T'/>(<jt:item source='$field.name'/>).Pack());
</jt:equals>
<jt:equals source='$field.type' value='Set'>
   pPack->WritePropertySet(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property, <jt:item source='$field.name'/>.Get());
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
   //if(!<jt:item source='$field.name'/>.Pack(pPack)){
   //   return EFalse;
   //}
</jt:equals>
<jt:equals source='$field.type' value='Object|Bytes|Types'>
   if(pPack->WriteNodeBegin(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property)){
      if(!<jt:item source='$field.name'/>.Pack(pPack)){
         return EFalse;
      }
      pPack->WriteNodeEnd();
   }
</jt:equals>
</jt:false>
</jt:loop>
   // 返回结果
   return result;
}

//============================================================
// <T>将内容打包成为一个属性字符串。</T>
//
// @param pPack 打包字符串
// @return 处理结果
//============================================================
TBool S<jt:item source='$entity.name'/>::Pack(MPack* pPack){
   MO_ASSERT(pPack);
   // 打包数据
   TBool result = pPack->WriteAttributeBegin();
   if(result){
      result = PackData(pPack);
      if(result){
         result = pPack->WriteAttributeEnd();
      }
   }
   // 返回结果
   return result;
}

//============================================================
// <T>将一个打包字符串解包为内容。</T>
//
// @param pPack 打包字符串
// @param pHead 头信息
// @param pFound 查找到
// @return 处理结果
//============================================================
TBool S<jt:item source='$entity.name'/>::UnpackProperty(MPack* pPack, SPropertyHead* pHead, TBool* pFound){
<jt:notEmpty source='$entity.parent_name'>
   // 父类处理
   TBool found = EFalse;
   TBool result = S<jt:item source='$entity.parent_name'/>::UnpackProperty(pPack, pHead, &found);
   if(!result){
      return EFalse;
   }
   if(found){
      *pFound = ETrue;
      return ETrue;
   }
</jt:notEmpty>
   // 读取属性名称
   TCharC* pPropertyName = pHead->Name();
   if(NULL == pPropertyName){
      MO_FATAL("Property name is invalid.");
      return EFalse;
   }
<jt:loop source='$entity' alias='field'>
   // 读取<jt:item source='$field.label'/>内容
   if(K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property.IsName(pPropertyName)){
<jt:true source='$field.is_collection'>
      if(pPack->ReadNodeBegin(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property)){
         if(!<jt:item source='$field.name'/>.Unpack(pPack)){
            return EFalse;
         }
         pPack->ReadNodeEnd();
      }
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool|Byte|Char|Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float|Double|TimeTick|TimeSpan|DateTime'>
      <jt:item source='$field.name'/> = pPack->ReadProperty<jt:item source='$field.type'/>(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property);
</jt:equals>
<jt:equals source='$field.type' value='Enum'>
      <jt:item source='$field.name'/> = (<jt:item source='$field.type_name'/>)pPack->ReadPropertyEnum(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property);
</jt:equals>
<jt:equals source='$field.type' value='Set'>
      <jt:item source='$field.name'/>.Modify(pPack->ReadPropertySet(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property));
</jt:equals>
<jt:equals source='$field.type' value='String'>
      <jt:item source='$field.name'/>.SetLength(pPack->ReadPropertyString(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property, <jt:item source='$field.name'/>.Memory(), <jt:item source='$field.name'/>.Size()));
</jt:equals>
<jt:equals source='$field.type' value='Type'>
      <jt:item source='$field.name'/> = TFs<jt:item source='$field.type_name' removeFirst='T'/>::Decode(pPack->ReadPropertyType(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property, TFs<jt:item source='$field.type_name' removeFirst='T'/>(), TFs<jt:item source='$field.type_name' removeFirst='T'/>::Size()));
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
      //if(!<jt:item source='$field.name'/>.Unpack(pPack)){
      //   return EFalse;
      //}
</jt:equals>
<jt:equals source='$field.type' value='Object|Bytes|Types'>
      if(pPack->ReadNodeBegin(&K<jt:item source='$entity.name'/>_<jt:item source='$field.name' format='upper.first'/>Property)){
         if(!<jt:item source='$field.name'/>.Unpack(pPack)){
            return EFalse;
         }
         pPack->ReadNodeEnd();
      }
</jt:equals>
</jt:false>
      *pFound = ETrue;
      return ETrue;
   }
</jt:loop>
   *pFound = EFalse;
   return ETrue;
}

//============================================================
// <T>将一个打包字符串解包为内容。</T>
//
// @param pPack 打包字符串
// @return 处理结果
//============================================================
TBool S<jt:item source='$entity.name'/>::Unpack(MPack* pPack){
   MO_ASSERT(pPack);
   EPropertyPack packCd = pPack->PackCd();
   // 打包数据
   TBool result = pPack->ReadAttributeBegin();
   if(result){
      TBool found = EFalse;
      TBool unpacked = EFalse;
      // 读取属性处理
      SPropertyHead head;
      while(pPack->ReadPropertyHead(&head)){
         if(EPropertyPack_Name == packCd){
            unpacked = UnpackProperty(pPack, &head, &found);
         }else{
            MO_FATAL("Unknown pack type.");
         }
         if(!unpacked){
            return EFalse;
         }
      }
      result = pPack->ReadAttributeEnd();
   }
   // 返回结果
   return result;
}

//============================================================
// <T>重置内部消息。</T>
//============================================================
void S<jt:item source='$entity.name'/>::Reset(){
<jt:notEmpty source='$entity.parent_name'>
   S<jt:item source='$entity.parent_name'/>::Reset();
</jt:notEmpty>
   InnerReset();
}
<jt:equals source='$entity:name' value='Struct'>

//============================================================
// <T>分解字符串。</T>
//
// @param pValue 字符串
//============================================================
TBool S<jt:item source='$entity.name'/>::Parse(TCharC* pValue){
<jt:empty source='$entity.parent_name'>
   TBool result = EFalse;
</jt:empty>
<jt:notEmpty source='$entity.parent_name'>
   TBool result = S<jt:item source='$entity.parent_name'/>::Parse(pValue);
</jt:notEmpty>
   // @manual (S<jt:item source='$entity.name'/>.Parse.Begin)
   //------------------------------------------------------------
<jt:empty source='$entity.build_parse'>
   //------------------------------------------------------------
</jt:empty>
<jt:notEmpty source='$entity.build_parse'>
<jt:item source='$entity.build_parse'/>//------------------------------------------------------------
</jt:notEmpty>
   // @manual (S<jt:item source='$entity.name'/>.Parse.End)
   return result;
}

//============================================================
// <T>格式化为字符串。</T>
//
// @param pValue 字符串
// @param capacity 容量
// @return 字符串
//============================================================
TCharC* S<jt:item source='$entity.name'/>::ToString(TChar* pValue, TSize capacity){
<jt:notEmpty source='$entity.parent_name'>
   S<jt:item source='$entity.parent_name'/>::ToString(pValue, capacity);
</jt:notEmpty>
   // @manual (S<jt:item source='$entity.name'/>.ToString.Begin)
   //------------------------------------------------------------
<jt:empty source='$entity.build_string'>
   //------------------------------------------------------------
</jt:empty>
<jt:notEmpty source='$entity.build_string'>
<jt:item source='$entity.build_string'/>//------------------------------------------------------------
</jt:notEmpty>
   // @manual (S<jt:item source='$entity.name'/>.ToString.End)
   return pValue;
}

//============================================================
// <T>格式化为显示字符串。</T>
//
// @param pValue 字符串
// @param capacity 容量
// @return 字符串
//============================================================
TCharC* S<jt:item source='$entity.name'/>::ToDisplay(TChar* pValue, TSize capacity){
<jt:notEmpty source='$entity.parent_name'>
   S<jt:item source='$entity.parent_name'/>::ToDisplay(pValue, capacity);
</jt:notEmpty>
   // @manual (S<jt:item source='$entity.name'/>.ToDisplay.Begin)
   //------------------------------------------------------------
<jt:empty source='$entity.build_display'>
   //------------------------------------------------------------
</jt:empty>
<jt:notEmpty source='$entity.build_display'>
<jt:item source='$entity.build_display'/>//------------------------------------------------------------
</jt:notEmpty>
   // @manual (S<jt:item source='$entity.name'/>.ToDisplay.End)
   return pValue;
}
</jt:equals>

//============================================================
// <T>获得内部消息。</T>
//
// @param pValue 字符串
// @param capacity 容量
// @param level 层级
// @return 字符串
//============================================================
TCharC* S<jt:item source='$entity.name'/>::Track(MString* pTrack, TInt level){
   MO_ASSERT(pTrack);
   // 追加数据内容信息
<jt:notEmpty source='$entity.parent_name'>
   S<jt:item source='$entity.parent_name'/>::Track(pTrack, level);
</jt:notEmpty>
<jt:loop source='$entity' alias='field'>
   pTrack->AppendRepeat(MO_DUMP_INDENT, level);
<jt:true source='$field.is_collection'>
   if(<jt:item source='$field.name'/>.IsEmpty()){
      pTrack->Append(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> = [empty]\n");
   }else{
<jt:equals source='$field.type' value='Struct'>
      TInt count = this-><jt:item source='$field.name'/>.Length();
      TInt loop = MO_MIN(MO_TRACK_ITEMS_MAXCOUNT, count);
      pTrack->AppendFormat(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> = [count=%d]\n", count);
      for(TInt n=0; n < loop; n++){
         pTrack->AppendRepeat(MO_DUMP_INDENT, level + 1);
         pTrack->AppendFormat("[%d] <jt:item source='$field.type_name'/>\n", n);
         this-><jt:item source='$field.name'/>.Get(n).Track(pTrack, level + 2);
      }
      if(loop < count){
         pTrack->AppendRepeat(MO_DUMP_INDENT, level + 1);
         pTrack->Append("...\n");
      }
</jt:equals>
<jt:equals source='$field.type' value='Object'>
      TInt count = this-><jt:item source='$field.name'/>.Count();
      TInt loop = MO_MIN(MO_TRACK_ITEMS_MAXCOUNT, count);
      pTrack->AppendFormat(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> = [count=%d]\n", count);
      for(TInt n=0; n < loop; n++){
         pTrack->AppendRepeat(MO_DUMP_INDENT, level + 1);
         pTrack->AppendFormat("[%d] <jt:item source='$field.type_name'/>\n", n);
         this-><jt:item source='$field.name'/>.Get(n).Track(pTrack, level + 2);
      }
      if(loop < count){
         pTrack->AppendRepeat(MO_DUMP_INDENT, level + 1);
         pTrack->Append("...\n");
      }
</jt:equals>
   }
</jt:true>
<jt:false source='$field.is_collection'>
<jt:equals source='$field.type' value='Bool'>
   pTrack->AppendFormat(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> = 0x%08X (%s = %d)\n", this-><jt:item source='$field.name'/>, RBool::ToDisplay(this-><jt:item source='$field.name'/>), this-><jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Enum'>
   pTrack->AppendFormat(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> = 0x%08X (<jt:item source='$field.type_name'/>::%s = %d)\n", this-><jt:item source='$field.name'/>, REnum<jt:item source='$field.type_name' removeFirst='E'/>::ToString(this-><jt:item source='$field.name'/>), this-><jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Set'>
   TFsText <jt:item source='$field.name'/>Text = this-><jt:item source='$field.name'/>.ToString();
   pTrack->AppendFormat(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> = 0x%08X (<jt:item source='$field.type_name'/>[%s] = %d)\n", this-><jt:item source='$field.name'/>.Get(), (TCharC*)<jt:item source='$field.name'/>Text, this-><jt:item source='$field.name'/>.Get());
</jt:equals>
<jt:equals source='$field.type' value='Type'>
   pTrack->AppendFormat(" => [<jt:item source='$field.type_name' rpad='14'/>] <jt:item source='$field.name'/> = [%s]\n", TFs<jt:item source='$field.type_name' removeFirst='T'/>(this-><jt:item source='$field.name'/>).Format());
</jt:equals>
<jt:equals source='$field.type' value='Char|Byte|Int8|Uint8'>
   pTrack->AppendFormat(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> = 0x%02X (%d)\n", this-><jt:item source='$field.name'/>, this-><jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Int16|Uint16'>
   pTrack->AppendFormat(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> = 0x%04X (%d)\n", this-><jt:item source='$field.name'/>, this-><jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Int32|Uint32'>
   pTrack->AppendFormat(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> = 0x%08X (%d)\n", this-><jt:item source='$field.name'/>, this-><jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Int64|Uint64|TimeTick|TimeSpan|DateTime'>
   pTrack->AppendFormat(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> = 0x%016X (%ld)\n", this-><jt:item source='$field.name'/>, this-><jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='Float|Double'>
   pTrack->AppendFormat(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> = %f\n", this-><jt:item source='$field.name'/>);
</jt:equals>
<jt:equals source='$field.type' value='String'>
   pTrack->AppendFormat(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> = %s\n", this-><jt:item source='$field.name'/>.ToDisplay((TChar*)TFsText(), TFsText::Size()));
</jt:equals>
<jt:equals source='$field.type' value='Bytes'>
   pTrack->Append(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> (<jt:item source='$field.type_name'/>)\n");
   this-><jt:item source='$field.name'/>.Track(pTrack, level + 1);
</jt:equals>
<jt:equals source='$field.type' value='Struct'>
<jt:true source='$field.is_system'>
   pTrack->AppendFormat(" => [<jt:item source='$field.type_name' rpad='14'/>] <jt:item source='$field.name'/> = [%s]\n", TFs<jt:item source='$field.type_name' removeFirst='S'/>(this-><jt:item source='$field.name'/>).Format());
</jt:true>
<jt:false source='$field.is_system'>
   pTrack->AppendFormat(" => [<jt:item source='$field.type_name' rpad='14'/>] <jt:item source='$field.name'/> = [%s]\n", this-><jt:item source='$field.name'/>.ToDisplay((TChar*)TFsText(), TFsText::Size()));
</jt:false>
</jt:equals>
<jt:equals source='$field.type' value='Object'>
   pTrack->Append(" => [<jt:item source='$field.type' rpad='14'/>] <jt:item source='$field.name'/> (<jt:item source='$field.type_name'/>)\n");
   this-><jt:item source='$field.name'/>.Track(pTrack, level + 1);
</jt:equals>
</jt:false>
</jt:loop>
   return pTrack->MemoryC();
}

// @manual (S<jt:item source='$entity.name'/>.Begin)
//------------------------------------------------------------
<jt:empty source='$entity.build_source'>
//------------------------------------------------------------
</jt:empty>
<jt:notEmpty source='$entity.build_source'>
<jt:item source='$entity.build_source'/>//------------------------------------------------------------
</jt:notEmpty>
// @manual (S<jt:item source='$entity.name'/>.End)
</jt:equals>
</jt:loop>

MO_NAMESPACE_END
]]></Source>
</Template>
